#!/bin/bash

# REPO=git@github.com:khs1994/docs.git
# REPO_ALIYUN=git@code.aliyun.com:khs1994/docs.git
export PATH=$PATH:~/atom/docs
  if [ -e "repo.json" ];then
  echo `repo.php path`
  REPO=`repo.php github`
  REPO_ALIYUN=`repo.php aliyun`
  BRANCH=`repo.php branch`
  DEPLOY_BRANCH=`repo.php deploy-branch`
else
  echo -e "\033[31mINFO\033[0m  repo.json not exists"
fi
  VERSION=0.0.1

  echo
  echo
  echo

function push {
  #statements
  git push -f aliyun $BRANCH
  if [ $? = 0 ];then
    echo -e "\033[32mINFO\033[0m  $REPO_ALIYUN already push success"
  else
    echo -e "\033[31mINFO\033[0m  $REPO_ALIYUN ERROR"
  fi
  git push -f origin $BRANCH
  if [ $? = 0 ];then
    echo -e "\033[32mINFO\033[0m  $REPO already push success"
  else
    echo -e "\033[31mINFO\033[0m  $REPO_ALIYUN ERROR"
  fi
}

case $1 in
  1)
  exit 1
  ;;
  init)
    which gitbook
    if [ $? = 0 ];then
      echo -e "\033[32mINFO\033[0m  gitBook-cli already installed"
    else
      echo -e "\033[32mINFO\033[0m  gitBook-cli is installing..."
      npm install -g hexo-cli
    fi
    echo -e "\033[32mINFO\033[0m  GitBook Plungs is installing..."
    gitbook install
    ;;

  git-init)
     echo -e "this repo is \033[32m$REPO\033[0m ? YES || NO :\c"

     read -p "  " REPO_BOOLE

    if [ $REPO_BOOLE = "y" ] || [ $REPO_BOOLE = "yes" ] || [ $REPO_BOOLE = "Y" ];then
      rm -rf .git
      git init
      git remote add origin $REPO >/dev/null 2>&1 && \
         echo -e "\033[32mINFO\033[0m  remote add SUCCESS"
      git remote add aliyun $REPO_ALIYUN >/dev/null 2>&1 && \
         echo -e "\033[32mINFO\033[0m  remote add SUCCESS"
      git checkout -b $BRANCH
      git add .
      git commit -m "first"
      echo -e "\033[32mINFO\033[0m  first commit SUCCESS"
      push
    else
      echo "stop"
    fi
  ;;

  git-push)
    push
  ;;

  deploy)
    echo -e "\033[32mINFO\033[0m  rm and mkdir .deploy_git folder..."
    rm -rf .deploy_git
    mkdir .deploy_git
    cd .deploy_git
    git init
    git remote add origin "$REPO" ; git remote add aliyun "$REPO_ALIYUN"
    git checkout -b $DEPLOY_BRANCH
    echo -e "\033[32mINFO\033[0m  Copying files from _book folder..."
    cp -r ../_book/. .
    git add .
    git commit -m "khs1994.gitbook script"
    push
  ;;

  ssh)
    travis encrypt-file ~/.ssh/id_rsa --add
  ;;

  debug)
  echo -e "\033[32mGitHub\033[0m  $REPO"
  echo -e "\033[32mAliyun\033[0m  $REPO_ALIYUN"
  echo -e "\033[32mBRANCH\033[0m  $BRANCH"
  ;;

  fork-pull)
  git fetch source
  git branch -av
  git rev-parse --abbrev-ref HEAD
  git checkout $BRANCH
  git merge source/$BRANCH
  ;;

  git-new)
  rm -rf *
  cat ~/atom/laravel-docs/.gitignore >> .gitignore
  cat ~/atom/docs/repo.json >> repo.json
  cat ~/atom/laravel-docs/book.json >> book.json
  cp ~/atom/docs/.travis.yml .
  cp -r ~/atom/docs/.travis .
  chmod +x .travis/deploy.sh

  ;;

  repo.json)
  echo "
{
    \"type\": \"no-fork\",
    \"repo\": {
        \"github\": \"\",
        \"aliyun\": \"\"
    },
    \"source\": \"\",
    \"branch\": \"master\",
    \"deploy-branch\": \"gh-pages\",
    \"description\": \"\"
}
" >> repo.json
  ;;

  build)
    docker run -it --rm \
      -v "$PWD":/tmp/gitbook-src \
      khs1994/gitbook

    rm -rf node_modules
  ;;

  *)
  echo  "
GitBook khs1994.com 小工具"$VERSION"

Options:

init      : 初始化部署环境[install GitBook-cli,etc]
deploy    : 将静态文件推送到GitHub
git-init  : 将部署文件的仓库初始化
git-push  : 将部署文件的仓库推送
ssh       : [Travis CI]加密SSH密钥
debug     : 输出调试信息
"
;;
esac
